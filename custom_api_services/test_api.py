#!/usr/bin/env python3
"""
Test script cho Face Recognition API
"""

import requests
import base64
import json
import time

# C·∫•u h√¨nh
API_BASE_URL = "http://localhost:8000"
TEST_IMAGE_PATH = "test_face.jpg"  # T·∫°o file ·∫£nh test ho·∫∑c thay ƒë·ªïi path

def encode_image_to_base64(image_path):
    """Encode ·∫£nh th√†nh base64"""
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except FileNotFoundError:
        print(f"Kh√¥ng t√¨m th·∫•y file ·∫£nh: {image_path}")
        return None

def test_health_check():
    """Test health check endpoint"""
    print("üîç Testing health check...")
    try:
        response = requests.get(f"{API_BASE_URL}/face-recognition/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check passed: {data}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_face_verification(face_image, action="check_in", employee_id=1):
    """Test face verification endpoint"""
    print(f"üîç Testing face verification for {action}...")
    
    payload = {
        "face_image": face_image,
        "action": action,
        "employee_id": employee_id
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/face-recognition/verify",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Face verification {action} result: {data}")
            return data.get('success', False)
        else:
            print(f"‚ùå Face verification failed: {response.status_code}")
            print(f"Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Face verification error: {e}")
        return False

def test_face_registration(face_image, employee_id=1):
    """Test face registration endpoint"""
    print(f"üîç Testing face registration for employee {employee_id}...")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/face-recognition/register",
            params={"employee_id": employee_id},
            json={"face_image": face_image, "action": "register", "employee_id": employee_id},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Face registration result: {data}")
            return data.get('success', False)
        else:
            print(f"‚ùå Face registration failed: {response.status_code}")
            print(f"Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Face registration error: {e}")
        return False

def create_test_image():
    """T·∫°o ·∫£nh test ƒë∆°n gi·∫£n (n·∫øu kh√¥ng c√≥ ·∫£nh th·∫≠t)"""
    try:
        import numpy as np
        import cv2
        
        # T·∫°o ·∫£nh test ƒë∆°n gi·∫£n
        img = np.zeros((300, 300, 3), dtype=np.uint8)
        img.fill(128)  # M√†u x√°m
        
        # V·∫Ω h√¨nh tr√≤n ƒë∆°n gi·∫£n ƒë·ªÉ gi·∫£ l·∫≠p khu√¥n m·∫∑t
        cv2.circle(img, (150, 150), 80, (255, 255, 255), -1)
        cv2.circle(img, (130, 130), 10, (0, 0, 0), -1)  # M·∫Øt tr√°i
        cv2.circle(img, (170, 130), 10, (0, 0, 0), -1)  # M·∫Øt ph·∫£i
        cv2.circle(img, (150, 170), 15, (0, 0, 0), -1)  # Mi·ªáng
        
        cv2.imwrite("test_face.jpg", img)
        print("‚úÖ Created test image: test_face.jpg")
        return True
    except ImportError:
        print("‚ùå OpenCV not available for creating test image")
        return False
    except Exception as e:
        print(f"‚ùå Error creating test image: {e}")
        return False

def main():
    """Main test function"""
    print("üöÄ Starting Face Recognition API Tests")
    print("=" * 50)
    
    # Test 1: Health check
    if not test_health_check():
        print("‚ùå API kh√¥ng kh·∫£ d·ª•ng. D·ª´ng test.")
        return
    
    # Test 2: T·∫°o ho·∫∑c load ·∫£nh test
    face_image = encode_image_to_base64(TEST_IMAGE_PATH)
    if not face_image:
        print("üì∏ Creating test image...")
        if create_test_image():
            face_image = encode_image_to_base64(TEST_IMAGE_PATH)
        else:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o ·∫£nh test. D·ª´ng test.")
            return
    
    if not face_image:
        print("‚ùå Kh√¥ng th·ªÉ encode ·∫£nh. D·ª´ng test.")
        return
    
    print(f"‚úÖ Loaded test image: {len(face_image)} characters")
    
    # Test 3: Face registration
    print("\n" + "=" * 50)
    registration_success = test_face_registration(face_image, employee_id=1)
    
    # Test 4: Face verification for check-in
    print("\n" + "=" * 50)
    checkin_success = test_face_verification(face_image, "check_in", employee_id=1)
    
    # Test 5: Face verification for check-out
    print("\n" + "=" * 50)
    checkout_success = test_face_verification(face_image, "check_out", employee_id=1)
    
    # Test 6: Test v·ªõi employee_id kh√°c
    print("\n" + "=" * 50)
    test_face_verification(face_image, "check_in", employee_id=2)
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä Test Summary:")
    print(f"Health Check: {'‚úÖ PASS' if True else '‚ùå FAIL'}")
    print(f"Registration: {'‚úÖ PASS' if registration_success else '‚ùå FAIL'}")
    print(f"Check-in: {'‚úÖ PASS' if checkin_success else '‚ùå FAIL'}")
    print(f"Check-out: {'‚úÖ PASS' if checkout_success else '‚ùå FAIL'}")
    
    if all([registration_success, checkin_success, checkout_success]):
        print("\nüéâ All tests passed! API is working correctly.")
    else:
        print("\n‚ö†Ô∏è Some tests failed. Check the logs above.")

if __name__ == "__main__":
    main()
